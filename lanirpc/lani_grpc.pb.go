// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package lanirpc

import (
	context "context"
	proto "github.com/SSSOC-CAN/laniakea-plugin-sdk/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LaniClient is the client API for Lani service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LaniClient interface {
	// lanicli: `stop`
	//StopDaemon will send a shutdown request to the interrupt handler, triggering
	//a graceful shutdown of the daemon.
	StopDaemon(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
	// lanicli: `admin-test`
	//AdminTest will send a string response if the proper macaroon is provided.
	AdminTest(ctx context.Context, in *AdminTestRequest, opts ...grpc.CallOption) (*AdminTestResponse, error)
	// lanicli: `test`
	//TestCommand will send a string response regardless if a macaroon is provided or not.
	TestCommand(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error)
	// lanicli: `bake-macaroon`
	//BakeMacaroon will bake a new macaroon based on input permissions and constraints.
	BakeMacaroon(ctx context.Context, in *BakeMacaroonRequest, opts ...grpc.CallOption) (*BakeMacaroonResponse, error)
	//
	//Deprecated! SetTemperature will now be a demo controller plugin which uses PluginAPI Command
	SetTemperature(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption) (*proto.Empty, error)
	//
	//Deprecated! SetPressure will now be a demo controller plugin which uses PluginAPI Command
	SetPressure(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption) (*proto.Empty, error)
	//
	//Deprecated! StartRecording is now /lanirpc.PluginAPI/StartRecord
	StartRecording(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption) (*proto.Empty, error)
	//
	//Deprecated! StopRecording is now /lanirpc.PluginAPI/StopRecord
	StopRecording(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption) (*proto.Empty, error)
	//
	//Deprecated! SubscribeDataStream is now /lanirpc.PluginAPI/Subscribe
	SubscribeDataStream(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption) (*proto.Empty, error)
	//
	//Deprecated! LoadTestPlan will no longer be supported
	LoadTestPlan(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption) (*proto.Empty, error)
	//
	//Deprecated! StartTestPlan will no longer be supported
	StartTestPlan(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption) (*proto.Empty, error)
	//
	//Deprecated! StopTestPlan will no longer be supported
	StopTestPlan(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption) (*proto.Empty, error)
	//
	//Deprecated! InsertROIMarker will no longer be supported
	InsertROIMarker(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption) (*proto.Empty, error)
}

type laniClient struct {
	cc grpc.ClientConnInterface
}

func NewLaniClient(cc grpc.ClientConnInterface) LaniClient {
	return &laniClient{cc}
}

func (c *laniClient) StopDaemon(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, "/lanirpc.Lani/StopDaemon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *laniClient) AdminTest(ctx context.Context, in *AdminTestRequest, opts ...grpc.CallOption) (*AdminTestResponse, error) {
	out := new(AdminTestResponse)
	err := c.cc.Invoke(ctx, "/lanirpc.Lani/AdminTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *laniClient) TestCommand(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error) {
	out := new(TestResponse)
	err := c.cc.Invoke(ctx, "/lanirpc.Lani/TestCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *laniClient) BakeMacaroon(ctx context.Context, in *BakeMacaroonRequest, opts ...grpc.CallOption) (*BakeMacaroonResponse, error) {
	out := new(BakeMacaroonResponse)
	err := c.cc.Invoke(ctx, "/lanirpc.Lani/BakeMacaroon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *laniClient) SetTemperature(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption) (*proto.Empty, error) {
	out := new(proto.Empty)
	err := c.cc.Invoke(ctx, "/lanirpc.Lani/SetTemperature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *laniClient) SetPressure(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption) (*proto.Empty, error) {
	out := new(proto.Empty)
	err := c.cc.Invoke(ctx, "/lanirpc.Lani/SetPressure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *laniClient) StartRecording(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption) (*proto.Empty, error) {
	out := new(proto.Empty)
	err := c.cc.Invoke(ctx, "/lanirpc.Lani/StartRecording", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *laniClient) StopRecording(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption) (*proto.Empty, error) {
	out := new(proto.Empty)
	err := c.cc.Invoke(ctx, "/lanirpc.Lani/StopRecording", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *laniClient) SubscribeDataStream(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption) (*proto.Empty, error) {
	out := new(proto.Empty)
	err := c.cc.Invoke(ctx, "/lanirpc.Lani/SubscribeDataStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *laniClient) LoadTestPlan(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption) (*proto.Empty, error) {
	out := new(proto.Empty)
	err := c.cc.Invoke(ctx, "/lanirpc.Lani/LoadTestPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *laniClient) StartTestPlan(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption) (*proto.Empty, error) {
	out := new(proto.Empty)
	err := c.cc.Invoke(ctx, "/lanirpc.Lani/StartTestPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *laniClient) StopTestPlan(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption) (*proto.Empty, error) {
	out := new(proto.Empty)
	err := c.cc.Invoke(ctx, "/lanirpc.Lani/StopTestPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *laniClient) InsertROIMarker(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption) (*proto.Empty, error) {
	out := new(proto.Empty)
	err := c.cc.Invoke(ctx, "/lanirpc.Lani/InsertROIMarker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LaniServer is the server API for Lani service.
// All implementations must embed UnimplementedLaniServer
// for forward compatibility
type LaniServer interface {
	// lanicli: `stop`
	//StopDaemon will send a shutdown request to the interrupt handler, triggering
	//a graceful shutdown of the daemon.
	StopDaemon(context.Context, *StopRequest) (*StopResponse, error)
	// lanicli: `admin-test`
	//AdminTest will send a string response if the proper macaroon is provided.
	AdminTest(context.Context, *AdminTestRequest) (*AdminTestResponse, error)
	// lanicli: `test`
	//TestCommand will send a string response regardless if a macaroon is provided or not.
	TestCommand(context.Context, *TestRequest) (*TestResponse, error)
	// lanicli: `bake-macaroon`
	//BakeMacaroon will bake a new macaroon based on input permissions and constraints.
	BakeMacaroon(context.Context, *BakeMacaroonRequest) (*BakeMacaroonResponse, error)
	//
	//Deprecated! SetTemperature will now be a demo controller plugin which uses PluginAPI Command
	SetTemperature(context.Context, *proto.Empty) (*proto.Empty, error)
	//
	//Deprecated! SetPressure will now be a demo controller plugin which uses PluginAPI Command
	SetPressure(context.Context, *proto.Empty) (*proto.Empty, error)
	//
	//Deprecated! StartRecording is now /lanirpc.PluginAPI/StartRecord
	StartRecording(context.Context, *proto.Empty) (*proto.Empty, error)
	//
	//Deprecated! StopRecording is now /lanirpc.PluginAPI/StopRecord
	StopRecording(context.Context, *proto.Empty) (*proto.Empty, error)
	//
	//Deprecated! SubscribeDataStream is now /lanirpc.PluginAPI/Subscribe
	SubscribeDataStream(context.Context, *proto.Empty) (*proto.Empty, error)
	//
	//Deprecated! LoadTestPlan will no longer be supported
	LoadTestPlan(context.Context, *proto.Empty) (*proto.Empty, error)
	//
	//Deprecated! StartTestPlan will no longer be supported
	StartTestPlan(context.Context, *proto.Empty) (*proto.Empty, error)
	//
	//Deprecated! StopTestPlan will no longer be supported
	StopTestPlan(context.Context, *proto.Empty) (*proto.Empty, error)
	//
	//Deprecated! InsertROIMarker will no longer be supported
	InsertROIMarker(context.Context, *proto.Empty) (*proto.Empty, error)
	mustEmbedUnimplementedLaniServer()
}

// UnimplementedLaniServer must be embedded to have forward compatible implementations.
type UnimplementedLaniServer struct {
}

func (UnimplementedLaniServer) StopDaemon(context.Context, *StopRequest) (*StopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopDaemon not implemented")
}
func (UnimplementedLaniServer) AdminTest(context.Context, *AdminTestRequest) (*AdminTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminTest not implemented")
}
func (UnimplementedLaniServer) TestCommand(context.Context, *TestRequest) (*TestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestCommand not implemented")
}
func (UnimplementedLaniServer) BakeMacaroon(context.Context, *BakeMacaroonRequest) (*BakeMacaroonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BakeMacaroon not implemented")
}
func (UnimplementedLaniServer) SetTemperature(context.Context, *proto.Empty) (*proto.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTemperature not implemented")
}
func (UnimplementedLaniServer) SetPressure(context.Context, *proto.Empty) (*proto.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPressure not implemented")
}
func (UnimplementedLaniServer) StartRecording(context.Context, *proto.Empty) (*proto.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartRecording not implemented")
}
func (UnimplementedLaniServer) StopRecording(context.Context, *proto.Empty) (*proto.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopRecording not implemented")
}
func (UnimplementedLaniServer) SubscribeDataStream(context.Context, *proto.Empty) (*proto.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeDataStream not implemented")
}
func (UnimplementedLaniServer) LoadTestPlan(context.Context, *proto.Empty) (*proto.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadTestPlan not implemented")
}
func (UnimplementedLaniServer) StartTestPlan(context.Context, *proto.Empty) (*proto.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartTestPlan not implemented")
}
func (UnimplementedLaniServer) StopTestPlan(context.Context, *proto.Empty) (*proto.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopTestPlan not implemented")
}
func (UnimplementedLaniServer) InsertROIMarker(context.Context, *proto.Empty) (*proto.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertROIMarker not implemented")
}
func (UnimplementedLaniServer) mustEmbedUnimplementedLaniServer() {}

// UnsafeLaniServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LaniServer will
// result in compilation errors.
type UnsafeLaniServer interface {
	mustEmbedUnimplementedLaniServer()
}

func RegisterLaniServer(s grpc.ServiceRegistrar, srv LaniServer) {
	s.RegisterService(&Lani_ServiceDesc, srv)
}

func _Lani_StopDaemon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaniServer).StopDaemon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lanirpc.Lani/StopDaemon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaniServer).StopDaemon(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lani_AdminTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaniServer).AdminTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lanirpc.Lani/AdminTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaniServer).AdminTest(ctx, req.(*AdminTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lani_TestCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaniServer).TestCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lanirpc.Lani/TestCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaniServer).TestCommand(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lani_BakeMacaroon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BakeMacaroonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaniServer).BakeMacaroon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lanirpc.Lani/BakeMacaroon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaniServer).BakeMacaroon(ctx, req.(*BakeMacaroonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lani_SetTemperature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaniServer).SetTemperature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lanirpc.Lani/SetTemperature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaniServer).SetTemperature(ctx, req.(*proto.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lani_SetPressure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaniServer).SetPressure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lanirpc.Lani/SetPressure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaniServer).SetPressure(ctx, req.(*proto.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lani_StartRecording_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaniServer).StartRecording(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lanirpc.Lani/StartRecording",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaniServer).StartRecording(ctx, req.(*proto.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lani_StopRecording_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaniServer).StopRecording(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lanirpc.Lani/StopRecording",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaniServer).StopRecording(ctx, req.(*proto.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lani_SubscribeDataStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaniServer).SubscribeDataStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lanirpc.Lani/SubscribeDataStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaniServer).SubscribeDataStream(ctx, req.(*proto.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lani_LoadTestPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaniServer).LoadTestPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lanirpc.Lani/LoadTestPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaniServer).LoadTestPlan(ctx, req.(*proto.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lani_StartTestPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaniServer).StartTestPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lanirpc.Lani/StartTestPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaniServer).StartTestPlan(ctx, req.(*proto.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lani_StopTestPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaniServer).StopTestPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lanirpc.Lani/StopTestPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaniServer).StopTestPlan(ctx, req.(*proto.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lani_InsertROIMarker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaniServer).InsertROIMarker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lanirpc.Lani/InsertROIMarker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaniServer).InsertROIMarker(ctx, req.(*proto.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Lani_ServiceDesc is the grpc.ServiceDesc for Lani service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Lani_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lanirpc.Lani",
	HandlerType: (*LaniServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StopDaemon",
			Handler:    _Lani_StopDaemon_Handler,
		},
		{
			MethodName: "AdminTest",
			Handler:    _Lani_AdminTest_Handler,
		},
		{
			MethodName: "TestCommand",
			Handler:    _Lani_TestCommand_Handler,
		},
		{
			MethodName: "BakeMacaroon",
			Handler:    _Lani_BakeMacaroon_Handler,
		},
		{
			MethodName: "SetTemperature",
			Handler:    _Lani_SetTemperature_Handler,
		},
		{
			MethodName: "SetPressure",
			Handler:    _Lani_SetPressure_Handler,
		},
		{
			MethodName: "StartRecording",
			Handler:    _Lani_StartRecording_Handler,
		},
		{
			MethodName: "StopRecording",
			Handler:    _Lani_StopRecording_Handler,
		},
		{
			MethodName: "SubscribeDataStream",
			Handler:    _Lani_SubscribeDataStream_Handler,
		},
		{
			MethodName: "LoadTestPlan",
			Handler:    _Lani_LoadTestPlan_Handler,
		},
		{
			MethodName: "StartTestPlan",
			Handler:    _Lani_StartTestPlan_Handler,
		},
		{
			MethodName: "StopTestPlan",
			Handler:    _Lani_StopTestPlan_Handler,
		},
		{
			MethodName: "InsertROIMarker",
			Handler:    _Lani_InsertROIMarker_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lani.proto",
}
