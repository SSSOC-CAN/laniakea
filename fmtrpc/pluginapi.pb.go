//
//Author: Paul Côté
//Last Change Author: Paul Côté
//Last Date Changed: 2022/06/30

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: pluginapi.proto

package fmtrpc

import (
	proto "github.com/SSSOC-CAN/laniakea-plugin-sdk/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PluginState int32

const (
	PluginState_READY        PluginState = 0
	PluginState_BUSY         PluginState = 1
	PluginState_STOPPING     PluginState = 2
	PluginState_STOPPED      PluginState = 3
	PluginState_UNKNOWN      PluginState = 4
	PluginState_UNRESPONSIVE PluginState = 5
	PluginState_KILLED       PluginState = 6
)

// Enum value maps for PluginState.
var (
	PluginState_name = map[int32]string{
		0: "READY",
		1: "BUSY",
		2: "STOPPING",
		3: "STOPPED",
		4: "UNKNOWN",
		5: "UNRESPONSIVE",
		6: "KILLED",
	}
	PluginState_value = map[string]int32{
		"READY":        0,
		"BUSY":         1,
		"STOPPING":     2,
		"STOPPED":      3,
		"UNKNOWN":      4,
		"UNRESPONSIVE": 5,
		"KILLED":       6,
	}
)

func (x PluginState) Enum() *PluginState {
	p := new(PluginState)
	*p = x
	return p
}

func (x PluginState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PluginState) Descriptor() protoreflect.EnumDescriptor {
	return file_pluginapi_proto_enumTypes[0].Descriptor()
}

func (PluginState) Type() protoreflect.EnumType {
	return &file_pluginapi_proto_enumTypes[0]
}

func (x PluginState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PluginState.Descriptor instead.
func (PluginState) EnumDescriptor() ([]byte, []int) {
	return file_pluginapi_proto_rawDescGZIP(), []int{0}
}

type Plugin_PluginType int32

const (
	Plugin_DATASOURCE Plugin_PluginType = 0
	Plugin_CONTROLLER Plugin_PluginType = 1
)

// Enum value maps for Plugin_PluginType.
var (
	Plugin_PluginType_name = map[int32]string{
		0: "DATASOURCE",
		1: "CONTROLLER",
	}
	Plugin_PluginType_value = map[string]int32{
		"DATASOURCE": 0,
		"CONTROLLER": 1,
	}
)

func (x Plugin_PluginType) Enum() *Plugin_PluginType {
	p := new(Plugin_PluginType)
	*p = x
	return p
}

func (x Plugin_PluginType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Plugin_PluginType) Descriptor() protoreflect.EnumDescriptor {
	return file_pluginapi_proto_enumTypes[1].Descriptor()
}

func (Plugin_PluginType) Type() protoreflect.EnumType {
	return &file_pluginapi_proto_enumTypes[1]
}

func (x Plugin_PluginType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Plugin_PluginType.Descriptor instead.
func (Plugin_PluginType) EnumDescriptor() ([]byte, []int) {
	return file_pluginapi_proto_rawDescGZIP(), []int{1, 0}
}

type PluginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the plugin we want to interact with
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *PluginRequest) Reset() {
	*x = PluginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pluginapi_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginRequest) ProtoMessage() {}

func (x *PluginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pluginapi_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginRequest.ProtoReflect.Descriptor instead.
func (*PluginRequest) Descriptor() ([]byte, []int) {
	return file_pluginapi_proto_rawDescGZIP(), []int{0}
}

func (x *PluginRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Plugin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the plugin
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The plugin type (either Datasource or Controller)
	Type Plugin_PluginType `protobuf:"varint,2,opt,name=type,proto3,enum=fmtrpc.Plugin_PluginType" json:"type,omitempty"`
	// the current state of the plugin
	State PluginState `protobuf:"varint,3,opt,name=state,proto3,enum=fmtrpc.PluginState" json:"state,omitempty"`
	// Unix milli timestamp of when the plugin was started
	StartedAt int64 `protobuf:"varint,4,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	// Unix milli timestamp of when the plugin was stopped or killed. Value is 0 if it's not stopped or killed
	StoppedAt int64 `protobuf:"varint,5,opt,name=stopped_at,json=stoppedAt,proto3" json:"stopped_at,omitempty"`
	// The version number of the plugin, specified in the plugin
	Version string `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Plugin) Reset() {
	*x = Plugin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pluginapi_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Plugin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Plugin) ProtoMessage() {}

func (x *Plugin) ProtoReflect() protoreflect.Message {
	mi := &file_pluginapi_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Plugin.ProtoReflect.Descriptor instead.
func (*Plugin) Descriptor() ([]byte, []int) {
	return file_pluginapi_proto_rawDescGZIP(), []int{1}
}

func (x *Plugin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Plugin) GetType() Plugin_PluginType {
	if x != nil {
		return x.Type
	}
	return Plugin_DATASOURCE
}

func (x *Plugin) GetState() PluginState {
	if x != nil {
		return x.State
	}
	return PluginState_READY
}

func (x *Plugin) GetStartedAt() int64 {
	if x != nil {
		return x.StartedAt
	}
	return 0
}

func (x *Plugin) GetStoppedAt() int64 {
	if x != nil {
		return x.StoppedAt
	}
	return 0
}

func (x *Plugin) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type PluginsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of all currently registered plugins
	Plugins []*Plugin `protobuf:"bytes,1,rep,name=plugins,proto3" json:"plugins,omitempty"`
}

func (x *PluginsList) Reset() {
	*x = PluginsList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pluginapi_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginsList) ProtoMessage() {}

func (x *PluginsList) ProtoReflect() protoreflect.Message {
	mi := &file_pluginapi_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginsList.ProtoReflect.Descriptor instead.
func (*PluginsList) Descriptor() ([]byte, []int) {
	return file_pluginapi_proto_rawDescGZIP(), []int{2}
}

func (x *PluginsList) GetPlugins() []*Plugin {
	if x != nil {
		return x.Plugins
	}
	return nil
}

type ControllerPluginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the name of the plugin we wish to send the command to
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// the data we are sending to the plugin
	Frame *proto.Frame `protobuf:"bytes,2,opt,name=frame,proto3" json:"frame,omitempty"`
}

func (x *ControllerPluginRequest) Reset() {
	*x = ControllerPluginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pluginapi_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControllerPluginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControllerPluginRequest) ProtoMessage() {}

func (x *ControllerPluginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pluginapi_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControllerPluginRequest.ProtoReflect.Descriptor instead.
func (*ControllerPluginRequest) Descriptor() ([]byte, []int) {
	return file_pluginapi_proto_rawDescGZIP(), []int{3}
}

func (x *ControllerPluginRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ControllerPluginRequest) GetFrame() *proto.Frame {
	if x != nil {
		return x.Frame
	}
	return nil
}

type PluginConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the name of the plugin
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" yaml:"name"`
	// the type of the plugin, either datasource or controller
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty" yaml:"type"`
	// the name of the executable of the plugin
	ExecName string `protobuf:"bytes,3,opt,name=exec_name,json=execName,proto3" json:"exec_name,omitempty" yaml:"exec"`
	// the time in seconds to determine if a plugin has timed out
	Timeout int64 `protobuf:"varint,4,opt,name=timeout,proto3" json:"timeout,omitempty" yaml:"timeout"`
	// the maximum number of times a plugin can timeout
	MaxTimeouts int64 `protobuf:"varint,5,opt,name=max_timeouts,json=maxTimeouts,proto3" json:"max_timeouts,omitempty" yaml:"maxTimeouts"`
}

func (x *PluginConfig) Reset() {
	*x = PluginConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pluginapi_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginConfig) ProtoMessage() {}

func (x *PluginConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pluginapi_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginConfig.ProtoReflect.Descriptor instead.
func (*PluginConfig) Descriptor() ([]byte, []int) {
	return file_pluginapi_proto_rawDescGZIP(), []int{4}
}

func (x *PluginConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PluginConfig) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PluginConfig) GetExecName() string {
	if x != nil {
		return x.ExecName
	}
	return ""
}

func (x *PluginConfig) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *PluginConfig) GetMaxTimeouts() int64 {
	if x != nil {
		return x.MaxTimeouts
	}
	return 0
}

type PluginStateUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the name of the plugin
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// the current state of the plugin
	State PluginState `protobuf:"varint,2,opt,name=state,proto3,enum=fmtrpc.PluginState" json:"state,omitempty"`
}

func (x *PluginStateUpdate) Reset() {
	*x = PluginStateUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pluginapi_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginStateUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginStateUpdate) ProtoMessage() {}

func (x *PluginStateUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_pluginapi_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginStateUpdate.ProtoReflect.Descriptor instead.
func (*PluginStateUpdate) Descriptor() ([]byte, []int) {
	return file_pluginapi_proto_rawDescGZIP(), []int{5}
}

func (x *PluginStateUpdate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PluginStateUpdate) GetState() PluginState {
	if x != nil {
		return x.State
	}
	return PluginState_READY
}

var File_pluginapi_proto protoreflect.FileDescriptor

var file_pluginapi_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x06, 0x66, 0x6d, 0x74, 0x72, 0x70, 0x63, 0x1a, 0x0c, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x23, 0x0a, 0x0d, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xfc, 0x01, 0x0a,
	0x06, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x66, 0x6d, 0x74, 0x72,
	0x70, 0x63, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x66, 0x6d, 0x74, 0x72,
	0x70, 0x63, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x2c, 0x0a,
	0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x44,
	0x41, 0x54, 0x41, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x43,
	0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x52, 0x10, 0x01, 0x22, 0x37, 0x0a, 0x0b, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x07, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x66, 0x6d,
	0x74, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x07, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x22, 0x51, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x52, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x0c, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d,
	0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x22, 0x52, 0x0a, 0x11, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x66, 0x6d, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2a, 0x68,
	0x0a, 0x0b, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x09, 0x0a,
	0x05, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x55, 0x53, 0x59,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x02,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e,
	0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x49, 0x56, 0x45, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06,
	0x4b, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x32, 0xae, 0x04, 0x0a, 0x09, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x41, 0x50, 0x49, 0x12, 0x32, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x15, 0x2e, 0x66, 0x6d, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x31, 0x0a, 0x0a, 0x53, 0x74,
	0x6f, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x15, 0x2e, 0x66, 0x6d, 0x74, 0x72, 0x70,
	0x63, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x32, 0x0a,
	0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x15, 0x2e, 0x66, 0x6d, 0x74,
	0x72, 0x70, 0x63, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x30,
	0x01, 0x12, 0x32, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x12, 0x15, 0x2e, 0x66, 0x6d, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x31, 0x0a, 0x0a, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x12, 0x15, 0x2e, 0x66, 0x6d, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3a, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x1f, 0x2e, 0x66, 0x6d, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x30, 0x01, 0x12, 0x30, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x12, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x13, 0x2e, 0x66, 0x6d, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x12, 0x14, 0x2e, 0x66, 0x6d, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x0e, 0x2e, 0x66, 0x6d, 0x74, 0x72,
	0x70, 0x63, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x32, 0x0a, 0x09, 0x47, 0x65, 0x74,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x15, 0x2e, 0x66, 0x6d, 0x74, 0x72, 0x70, 0x63, 0x2e,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e,
	0x66, 0x6d, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x4a, 0x0a,
	0x14, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x2e, 0x66, 0x6d, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x66,
	0x6d, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x30, 0x01, 0x42, 0x22, 0x5a, 0x20, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x53, 0x53, 0x4f, 0x43, 0x2d, 0x43, 0x41,
	0x4e, 0x2f, 0x66, 0x6d, 0x74, 0x64, 0x2f, 0x66, 0x6d, 0x74, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pluginapi_proto_rawDescOnce sync.Once
	file_pluginapi_proto_rawDescData = file_pluginapi_proto_rawDesc
)

func file_pluginapi_proto_rawDescGZIP() []byte {
	file_pluginapi_proto_rawDescOnce.Do(func() {
		file_pluginapi_proto_rawDescData = protoimpl.X.CompressGZIP(file_pluginapi_proto_rawDescData)
	})
	return file_pluginapi_proto_rawDescData
}

var file_pluginapi_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_pluginapi_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_pluginapi_proto_goTypes = []interface{}{
	(PluginState)(0),                // 0: fmtrpc.PluginState
	(Plugin_PluginType)(0),          // 1: fmtrpc.Plugin.PluginType
	(*PluginRequest)(nil),           // 2: fmtrpc.PluginRequest
	(*Plugin)(nil),                  // 3: fmtrpc.Plugin
	(*PluginsList)(nil),             // 4: fmtrpc.PluginsList
	(*ControllerPluginRequest)(nil), // 5: fmtrpc.ControllerPluginRequest
	(*PluginConfig)(nil),            // 6: fmtrpc.PluginConfig
	(*PluginStateUpdate)(nil),       // 7: fmtrpc.PluginStateUpdate
	(*proto.Frame)(nil),             // 8: proto.Frame
	(*proto.Empty)(nil),             // 9: proto.Empty
}
var file_pluginapi_proto_depIdxs = []int32{
	1,  // 0: fmtrpc.Plugin.type:type_name -> fmtrpc.Plugin.PluginType
	0,  // 1: fmtrpc.Plugin.state:type_name -> fmtrpc.PluginState
	3,  // 2: fmtrpc.PluginsList.plugins:type_name -> fmtrpc.Plugin
	8,  // 3: fmtrpc.ControllerPluginRequest.frame:type_name -> proto.Frame
	0,  // 4: fmtrpc.PluginStateUpdate.state:type_name -> fmtrpc.PluginState
	2,  // 5: fmtrpc.PluginAPI.StartRecord:input_type -> fmtrpc.PluginRequest
	2,  // 6: fmtrpc.PluginAPI.StopRecord:input_type -> fmtrpc.PluginRequest
	2,  // 7: fmtrpc.PluginAPI.Subscribe:input_type -> fmtrpc.PluginRequest
	2,  // 8: fmtrpc.PluginAPI.StartPlugin:input_type -> fmtrpc.PluginRequest
	2,  // 9: fmtrpc.PluginAPI.StopPlugin:input_type -> fmtrpc.PluginRequest
	5,  // 10: fmtrpc.PluginAPI.Command:input_type -> fmtrpc.ControllerPluginRequest
	9,  // 11: fmtrpc.PluginAPI.ListPlugins:input_type -> proto.Empty
	6,  // 12: fmtrpc.PluginAPI.AddPlugin:input_type -> fmtrpc.PluginConfig
	2,  // 13: fmtrpc.PluginAPI.GetPlugin:input_type -> fmtrpc.PluginRequest
	2,  // 14: fmtrpc.PluginAPI.SubscribePluginState:input_type -> fmtrpc.PluginRequest
	9,  // 15: fmtrpc.PluginAPI.StartRecord:output_type -> proto.Empty
	9,  // 16: fmtrpc.PluginAPI.StopRecord:output_type -> proto.Empty
	8,  // 17: fmtrpc.PluginAPI.Subscribe:output_type -> proto.Frame
	9,  // 18: fmtrpc.PluginAPI.StartPlugin:output_type -> proto.Empty
	9,  // 19: fmtrpc.PluginAPI.StopPlugin:output_type -> proto.Empty
	8,  // 20: fmtrpc.PluginAPI.Command:output_type -> proto.Frame
	4,  // 21: fmtrpc.PluginAPI.ListPlugins:output_type -> fmtrpc.PluginsList
	3,  // 22: fmtrpc.PluginAPI.AddPlugin:output_type -> fmtrpc.Plugin
	3,  // 23: fmtrpc.PluginAPI.GetPlugin:output_type -> fmtrpc.Plugin
	7,  // 24: fmtrpc.PluginAPI.SubscribePluginState:output_type -> fmtrpc.PluginStateUpdate
	15, // [15:25] is the sub-list for method output_type
	5,  // [5:15] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_pluginapi_proto_init() }
func file_pluginapi_proto_init() {
	if File_pluginapi_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pluginapi_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PluginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pluginapi_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Plugin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pluginapi_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PluginsList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pluginapi_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControllerPluginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pluginapi_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PluginConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pluginapi_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PluginStateUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pluginapi_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pluginapi_proto_goTypes,
		DependencyIndexes: file_pluginapi_proto_depIdxs,
		EnumInfos:         file_pluginapi_proto_enumTypes,
		MessageInfos:      file_pluginapi_proto_msgTypes,
	}.Build()
	File_pluginapi_proto = out.File
	file_pluginapi_proto_rawDesc = nil
	file_pluginapi_proto_goTypes = nil
	file_pluginapi_proto_depIdxs = nil
}
