syntax = "proto3";

package fmtrpc;

option go_package = "github.com/SSSOC-CAN/fmtd/fmtrpc";

service DataCollector {
    /* fmtcli: `start-record`
    StartRecording will begin recording data from specified service and writing it.
    */
    rpc StartRecording (RecordRequest) returns (RecordResponse);
    /* fmtcli: `stop-record`
    StopRecording will end the recording of data from specified service.
    */
    rpc StopRecording (StopRecRequest) returns (StopRecResponse);
    /* fmtcli: `subscribe-data-stream`
    SubscribeDataStream returns a uni-directional stream (server -> client) of data being recorded from the Fluke DAQ.
    */
    rpc SubscribeDataStream (SubscribeDataRequest) returns (stream RealTimeData);
    /*
    DownloadHistoricalData opens up a TCP server on the FMTD and returns the server address. Once the TCP server accepts a request, it sends the requested file*/
    rpc DownloadHistoricalData (HistoricalDataRequest) returns (HistoricalDataResponse);
}

enum RecordService {
    TELEMETRY = 0;
    RGA = 1;
}

message RecordRequest {
    int64 polling_interval = 1;
    RecordService type = 2;
}

message RecordResponse {
    string msg = 1;
}

message StopRecRequest {
    RecordService type = 1;
}

message StopRecResponse {
    string msg = 1;
}

message SubscribeDataRequest {
}

message DataField {
    string name = 1;
    double value = 2;
}

message RealTimeData {
    string source = 1;
    bool is_scanning = 2;
    int64 timestamp = 3;
    map<int64, DataField> data = 4;
}

message HistoricalDataRequest {
    RecordService source = 1;
}

message HistoricalDataResponse {
    int64 server_port = 1;
    int64 buffer_size = 2;
}