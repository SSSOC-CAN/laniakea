syntax = "proto3";

package fmtrpc;

option go_package = "github.com/SSSOC-CAN/fmtd/fmtrpc";

service DataCollector {
    /* fmtcli: `start-record`
    StartRecording will begin recording data from specified service.
    */
    rpc StartRecording (RecordRequest) returns (RecordResponse);
    /* fmtcli: `stop-record`
    StopRecording will end the recording of data from specified service.
    */
    rpc StopRecording (StopRecRequest) returns (StopRecResponse);
    /*
    SubscribeDataStream returns a uni-directional stream (server -> client) of data being recorded from the Telemetry and RGA services.
    */
    rpc SubscribeDataStream (SubscribeDataRequest) returns (stream RealTimeData);
}

/*
`RecordService` has to be one of:

- `telemetry`: Temperature and pressure data recording (`TELEMETRY` = 0)
- `rga`: Residual gas analyser data recording (`RGA` = 1)
*/
enum RecordService {
    TELEMETRY = 0;
    RGA = 1;
}

message RecordRequest {
    // The time interval, in seconds, between data readings
    int64 polling_interval = 1;

    // Recording service type. Choose from either `telemetry` or `rga`
    RecordService type = 2;
}

message RecordResponse {
    // A short message indicating success or failure
    string msg = 1;
}

message StopRecRequest {
    // Recording service type. Choose from either `telemetry` or `rga`
    RecordService type = 1;
}

message StopRecResponse {
    // A short message indicating success or failure
    string msg = 1;
}

message SubscribeDataRequest {
}

message DataField {
    // The given name of the data field
    string name = 1;

    // The floating point value of the data field
    double value = 2;
}

message RealTimeData {
    // The name of the FMT service providing this data packet
    string source = 1;

    // A boolean value indicating whether this service is actively scanning for new data points or not
    bool is_scanning = 2;

    // The UNIX millisecond timestamp of when the data was recorded
    int64 timestamp = 3;

    // A map of the data points for this packet
    map<int64, DataField> data = 4;
}