// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package demorpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ControllerClient is the client API for Controller service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ControllerClient interface {
	// fmtcli: `set-temperature`
	//SetTemperature will set the temperature setpoint at a specified temperature (degrees celsius).
	//Can also set the temperature change rate (degree celsius/minute). Default is instantaneous change.
	//Returns a stream of updates of the setpoint until it reaches the desired temperature.
	SetTemperature(ctx context.Context, in *SetTempRequest, opts ...grpc.CallOption) (Controller_SetTemperatureClient, error)
	// fmtcli: `set-pressure`
	//SetPressure will set the pressure setpoint at a specified pressure (Torr).
	//Can also set the pressure change rate (torr/minute). Default is instantaneous change.
	//Returns a stream of updates of the setpoint until it reaches the desired pressure.
	SetPressure(ctx context.Context, in *SetPresRequest, opts ...grpc.CallOption) (Controller_SetPressureClient, error)
}

type controllerClient struct {
	cc grpc.ClientConnInterface
}

func NewControllerClient(cc grpc.ClientConnInterface) ControllerClient {
	return &controllerClient{cc}
}

func (c *controllerClient) SetTemperature(ctx context.Context, in *SetTempRequest, opts ...grpc.CallOption) (Controller_SetTemperatureClient, error) {
	stream, err := c.cc.NewStream(ctx, &Controller_ServiceDesc.Streams[0], "/demorpc.Controller/SetTemperature", opts...)
	if err != nil {
		return nil, err
	}
	x := &controllerSetTemperatureClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Controller_SetTemperatureClient interface {
	Recv() (*SetTempResponse, error)
	grpc.ClientStream
}

type controllerSetTemperatureClient struct {
	grpc.ClientStream
}

func (x *controllerSetTemperatureClient) Recv() (*SetTempResponse, error) {
	m := new(SetTempResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *controllerClient) SetPressure(ctx context.Context, in *SetPresRequest, opts ...grpc.CallOption) (Controller_SetPressureClient, error) {
	stream, err := c.cc.NewStream(ctx, &Controller_ServiceDesc.Streams[1], "/demorpc.Controller/SetPressure", opts...)
	if err != nil {
		return nil, err
	}
	x := &controllerSetPressureClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Controller_SetPressureClient interface {
	Recv() (*SetPresResponse, error)
	grpc.ClientStream
}

type controllerSetPressureClient struct {
	grpc.ClientStream
}

func (x *controllerSetPressureClient) Recv() (*SetPresResponse, error) {
	m := new(SetPresResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ControllerServer is the server API for Controller service.
// All implementations must embed UnimplementedControllerServer
// for forward compatibility
type ControllerServer interface {
	// fmtcli: `set-temperature`
	//SetTemperature will set the temperature setpoint at a specified temperature (degrees celsius).
	//Can also set the temperature change rate (degree celsius/minute). Default is instantaneous change.
	//Returns a stream of updates of the setpoint until it reaches the desired temperature.
	SetTemperature(*SetTempRequest, Controller_SetTemperatureServer) error
	// fmtcli: `set-pressure`
	//SetPressure will set the pressure setpoint at a specified pressure (Torr).
	//Can also set the pressure change rate (torr/minute). Default is instantaneous change.
	//Returns a stream of updates of the setpoint until it reaches the desired pressure.
	SetPressure(*SetPresRequest, Controller_SetPressureServer) error
	mustEmbedUnimplementedControllerServer()
}

// UnimplementedControllerServer must be embedded to have forward compatible implementations.
type UnimplementedControllerServer struct {
}

func (UnimplementedControllerServer) SetTemperature(*SetTempRequest, Controller_SetTemperatureServer) error {
	return status.Errorf(codes.Unimplemented, "method SetTemperature not implemented")
}
func (UnimplementedControllerServer) SetPressure(*SetPresRequest, Controller_SetPressureServer) error {
	return status.Errorf(codes.Unimplemented, "method SetPressure not implemented")
}
func (UnimplementedControllerServer) mustEmbedUnimplementedControllerServer() {}

// UnsafeControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControllerServer will
// result in compilation errors.
type UnsafeControllerServer interface {
	mustEmbedUnimplementedControllerServer()
}

func RegisterControllerServer(s grpc.ServiceRegistrar, srv ControllerServer) {
	s.RegisterService(&Controller_ServiceDesc, srv)
}

func _Controller_SetTemperature_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SetTempRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControllerServer).SetTemperature(m, &controllerSetTemperatureServer{stream})
}

type Controller_SetTemperatureServer interface {
	Send(*SetTempResponse) error
	grpc.ServerStream
}

type controllerSetTemperatureServer struct {
	grpc.ServerStream
}

func (x *controllerSetTemperatureServer) Send(m *SetTempResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Controller_SetPressure_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SetPresRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControllerServer).SetPressure(m, &controllerSetPressureServer{stream})
}

type Controller_SetPressureServer interface {
	Send(*SetPresResponse) error
	grpc.ServerStream
}

type controllerSetPressureServer struct {
	grpc.ServerStream
}

func (x *controllerSetPressureServer) Send(m *SetPresResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Controller_ServiceDesc is the grpc.ServiceDesc for Controller service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Controller_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "demorpc.Controller",
	HandlerType: (*ControllerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SetTemperature",
			Handler:       _Controller_SetTemperature_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SetPressure",
			Handler:       _Controller_SetPressure_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "demorpc/controller.proto",
}
