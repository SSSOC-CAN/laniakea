// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package fmtrpc

import (
	context "context"
	proto "github.com/SSSOC-CAN/laniakea-plugin-sdk/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FmtClient is the client API for Fmt service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FmtClient interface {
	// fmtcli: `stop`
	//StopDaemon will send a shutdown request to the interrupt handler, triggering
	//a graceful shutdown of the daemon.
	StopDaemon(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
	// fmtcli: `admin-test`
	//AdminTest will send a string response if the proper macaroon is provided.
	AdminTest(ctx context.Context, in *AdminTestRequest, opts ...grpc.CallOption) (*AdminTestResponse, error)
	// fmtcli: `test`
	//TestCommand will send a string response regardless if a macaroon is provided or not.
	TestCommand(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error)
	// fmtcli: `bake-macaroon`
	//BakeMacaroon will bake a new macaroon based on input permissions and constraints.
	BakeMacaroon(ctx context.Context, in *BakeMacaroonRequest, opts ...grpc.CallOption) (*BakeMacaroonResponse, error)
	//
	//Deprecated! SetTemperature will now be a demo controller plugin which uses PluginAPI Command
	SetTemperature(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption) (*proto.Empty, error)
	//
	//Deprecated! SetPressure will now be a demo controller plugin which uses PluginAPI Command
	SetPressure(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption) (*proto.Empty, error)
	//
	//Deprecated! StartRecording is now /fmtrpc.PluginAPI/StartRecord
	StartRecording(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption) (*proto.Empty, error)
	//
	//Deprecated! StopRecording is now /fmtrpc.PluginAPI/StopRecord
	StopRecording(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption) (*proto.Empty, error)
	//
	//Deprecated! SubscribeDataStream is now /fmtrpc.PluginAPI/Subscribe
	SubscribeDataStream(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption) (*proto.Empty, error)
	//
	//Deprecated! LoadTestPlan will no longer be supported
	LoadTestPlan(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption) (*proto.Empty, error)
	//
	//Deprecated! StartTestPlan will no longer be supported
	StartTestPlan(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption) (*proto.Empty, error)
	//
	//Deprecated! StopTestPlan will no longer be supported
	StopTestPlan(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption) (*proto.Empty, error)
	//
	//Deprecated! InsertROIMarker will no longer be supported
	InsertROIMarker(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption) (*proto.Empty, error)
}

type fmtClient struct {
	cc grpc.ClientConnInterface
}

func NewFmtClient(cc grpc.ClientConnInterface) FmtClient {
	return &fmtClient{cc}
}

func (c *fmtClient) StopDaemon(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, "/fmtrpc.Fmt/StopDaemon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fmtClient) AdminTest(ctx context.Context, in *AdminTestRequest, opts ...grpc.CallOption) (*AdminTestResponse, error) {
	out := new(AdminTestResponse)
	err := c.cc.Invoke(ctx, "/fmtrpc.Fmt/AdminTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fmtClient) TestCommand(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error) {
	out := new(TestResponse)
	err := c.cc.Invoke(ctx, "/fmtrpc.Fmt/TestCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fmtClient) BakeMacaroon(ctx context.Context, in *BakeMacaroonRequest, opts ...grpc.CallOption) (*BakeMacaroonResponse, error) {
	out := new(BakeMacaroonResponse)
	err := c.cc.Invoke(ctx, "/fmtrpc.Fmt/BakeMacaroon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fmtClient) SetTemperature(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption) (*proto.Empty, error) {
	out := new(proto.Empty)
	err := c.cc.Invoke(ctx, "/fmtrpc.Fmt/SetTemperature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fmtClient) SetPressure(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption) (*proto.Empty, error) {
	out := new(proto.Empty)
	err := c.cc.Invoke(ctx, "/fmtrpc.Fmt/SetPressure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fmtClient) StartRecording(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption) (*proto.Empty, error) {
	out := new(proto.Empty)
	err := c.cc.Invoke(ctx, "/fmtrpc.Fmt/StartRecording", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fmtClient) StopRecording(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption) (*proto.Empty, error) {
	out := new(proto.Empty)
	err := c.cc.Invoke(ctx, "/fmtrpc.Fmt/StopRecording", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fmtClient) SubscribeDataStream(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption) (*proto.Empty, error) {
	out := new(proto.Empty)
	err := c.cc.Invoke(ctx, "/fmtrpc.Fmt/SubscribeDataStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fmtClient) LoadTestPlan(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption) (*proto.Empty, error) {
	out := new(proto.Empty)
	err := c.cc.Invoke(ctx, "/fmtrpc.Fmt/LoadTestPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fmtClient) StartTestPlan(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption) (*proto.Empty, error) {
	out := new(proto.Empty)
	err := c.cc.Invoke(ctx, "/fmtrpc.Fmt/StartTestPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fmtClient) StopTestPlan(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption) (*proto.Empty, error) {
	out := new(proto.Empty)
	err := c.cc.Invoke(ctx, "/fmtrpc.Fmt/StopTestPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fmtClient) InsertROIMarker(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption) (*proto.Empty, error) {
	out := new(proto.Empty)
	err := c.cc.Invoke(ctx, "/fmtrpc.Fmt/InsertROIMarker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FmtServer is the server API for Fmt service.
// All implementations must embed UnimplementedFmtServer
// for forward compatibility
type FmtServer interface {
	// fmtcli: `stop`
	//StopDaemon will send a shutdown request to the interrupt handler, triggering
	//a graceful shutdown of the daemon.
	StopDaemon(context.Context, *StopRequest) (*StopResponse, error)
	// fmtcli: `admin-test`
	//AdminTest will send a string response if the proper macaroon is provided.
	AdminTest(context.Context, *AdminTestRequest) (*AdminTestResponse, error)
	// fmtcli: `test`
	//TestCommand will send a string response regardless if a macaroon is provided or not.
	TestCommand(context.Context, *TestRequest) (*TestResponse, error)
	// fmtcli: `bake-macaroon`
	//BakeMacaroon will bake a new macaroon based on input permissions and constraints.
	BakeMacaroon(context.Context, *BakeMacaroonRequest) (*BakeMacaroonResponse, error)
	//
	//Deprecated! SetTemperature will now be a demo controller plugin which uses PluginAPI Command
	SetTemperature(context.Context, *proto.Empty) (*proto.Empty, error)
	//
	//Deprecated! SetPressure will now be a demo controller plugin which uses PluginAPI Command
	SetPressure(context.Context, *proto.Empty) (*proto.Empty, error)
	//
	//Deprecated! StartRecording is now /fmtrpc.PluginAPI/StartRecord
	StartRecording(context.Context, *proto.Empty) (*proto.Empty, error)
	//
	//Deprecated! StopRecording is now /fmtrpc.PluginAPI/StopRecord
	StopRecording(context.Context, *proto.Empty) (*proto.Empty, error)
	//
	//Deprecated! SubscribeDataStream is now /fmtrpc.PluginAPI/Subscribe
	SubscribeDataStream(context.Context, *proto.Empty) (*proto.Empty, error)
	//
	//Deprecated! LoadTestPlan will no longer be supported
	LoadTestPlan(context.Context, *proto.Empty) (*proto.Empty, error)
	//
	//Deprecated! StartTestPlan will no longer be supported
	StartTestPlan(context.Context, *proto.Empty) (*proto.Empty, error)
	//
	//Deprecated! StopTestPlan will no longer be supported
	StopTestPlan(context.Context, *proto.Empty) (*proto.Empty, error)
	//
	//Deprecated! InsertROIMarker will no longer be supported
	InsertROIMarker(context.Context, *proto.Empty) (*proto.Empty, error)
	mustEmbedUnimplementedFmtServer()
}

// UnimplementedFmtServer must be embedded to have forward compatible implementations.
type UnimplementedFmtServer struct {
}

func (UnimplementedFmtServer) StopDaemon(context.Context, *StopRequest) (*StopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopDaemon not implemented")
}
func (UnimplementedFmtServer) AdminTest(context.Context, *AdminTestRequest) (*AdminTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminTest not implemented")
}
func (UnimplementedFmtServer) TestCommand(context.Context, *TestRequest) (*TestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestCommand not implemented")
}
func (UnimplementedFmtServer) BakeMacaroon(context.Context, *BakeMacaroonRequest) (*BakeMacaroonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BakeMacaroon not implemented")
}
func (UnimplementedFmtServer) SetTemperature(context.Context, *proto.Empty) (*proto.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTemperature not implemented")
}
func (UnimplementedFmtServer) SetPressure(context.Context, *proto.Empty) (*proto.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPressure not implemented")
}
func (UnimplementedFmtServer) StartRecording(context.Context, *proto.Empty) (*proto.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartRecording not implemented")
}
func (UnimplementedFmtServer) StopRecording(context.Context, *proto.Empty) (*proto.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopRecording not implemented")
}
func (UnimplementedFmtServer) SubscribeDataStream(context.Context, *proto.Empty) (*proto.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeDataStream not implemented")
}
func (UnimplementedFmtServer) LoadTestPlan(context.Context, *proto.Empty) (*proto.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadTestPlan not implemented")
}
func (UnimplementedFmtServer) StartTestPlan(context.Context, *proto.Empty) (*proto.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartTestPlan not implemented")
}
func (UnimplementedFmtServer) StopTestPlan(context.Context, *proto.Empty) (*proto.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopTestPlan not implemented")
}
func (UnimplementedFmtServer) InsertROIMarker(context.Context, *proto.Empty) (*proto.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertROIMarker not implemented")
}
func (UnimplementedFmtServer) mustEmbedUnimplementedFmtServer() {}

// UnsafeFmtServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FmtServer will
// result in compilation errors.
type UnsafeFmtServer interface {
	mustEmbedUnimplementedFmtServer()
}

func RegisterFmtServer(s grpc.ServiceRegistrar, srv FmtServer) {
	s.RegisterService(&Fmt_ServiceDesc, srv)
}

func _Fmt_StopDaemon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FmtServer).StopDaemon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fmtrpc.Fmt/StopDaemon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FmtServer).StopDaemon(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fmt_AdminTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FmtServer).AdminTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fmtrpc.Fmt/AdminTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FmtServer).AdminTest(ctx, req.(*AdminTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fmt_TestCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FmtServer).TestCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fmtrpc.Fmt/TestCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FmtServer).TestCommand(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fmt_BakeMacaroon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BakeMacaroonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FmtServer).BakeMacaroon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fmtrpc.Fmt/BakeMacaroon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FmtServer).BakeMacaroon(ctx, req.(*BakeMacaroonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fmt_SetTemperature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FmtServer).SetTemperature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fmtrpc.Fmt/SetTemperature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FmtServer).SetTemperature(ctx, req.(*proto.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fmt_SetPressure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FmtServer).SetPressure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fmtrpc.Fmt/SetPressure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FmtServer).SetPressure(ctx, req.(*proto.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fmt_StartRecording_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FmtServer).StartRecording(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fmtrpc.Fmt/StartRecording",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FmtServer).StartRecording(ctx, req.(*proto.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fmt_StopRecording_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FmtServer).StopRecording(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fmtrpc.Fmt/StopRecording",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FmtServer).StopRecording(ctx, req.(*proto.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fmt_SubscribeDataStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FmtServer).SubscribeDataStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fmtrpc.Fmt/SubscribeDataStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FmtServer).SubscribeDataStream(ctx, req.(*proto.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fmt_LoadTestPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FmtServer).LoadTestPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fmtrpc.Fmt/LoadTestPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FmtServer).LoadTestPlan(ctx, req.(*proto.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fmt_StartTestPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FmtServer).StartTestPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fmtrpc.Fmt/StartTestPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FmtServer).StartTestPlan(ctx, req.(*proto.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fmt_StopTestPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FmtServer).StopTestPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fmtrpc.Fmt/StopTestPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FmtServer).StopTestPlan(ctx, req.(*proto.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fmt_InsertROIMarker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FmtServer).InsertROIMarker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fmtrpc.Fmt/InsertROIMarker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FmtServer).InsertROIMarker(ctx, req.(*proto.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Fmt_ServiceDesc is the grpc.ServiceDesc for Fmt service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Fmt_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fmtrpc.Fmt",
	HandlerType: (*FmtServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StopDaemon",
			Handler:    _Fmt_StopDaemon_Handler,
		},
		{
			MethodName: "AdminTest",
			Handler:    _Fmt_AdminTest_Handler,
		},
		{
			MethodName: "TestCommand",
			Handler:    _Fmt_TestCommand_Handler,
		},
		{
			MethodName: "BakeMacaroon",
			Handler:    _Fmt_BakeMacaroon_Handler,
		},
		{
			MethodName: "SetTemperature",
			Handler:    _Fmt_SetTemperature_Handler,
		},
		{
			MethodName: "SetPressure",
			Handler:    _Fmt_SetPressure_Handler,
		},
		{
			MethodName: "StartRecording",
			Handler:    _Fmt_StartRecording_Handler,
		},
		{
			MethodName: "StopRecording",
			Handler:    _Fmt_StopRecording_Handler,
		},
		{
			MethodName: "SubscribeDataStream",
			Handler:    _Fmt_SubscribeDataStream_Handler,
		},
		{
			MethodName: "LoadTestPlan",
			Handler:    _Fmt_LoadTestPlan_Handler,
		},
		{
			MethodName: "StartTestPlan",
			Handler:    _Fmt_StartTestPlan_Handler,
		},
		{
			MethodName: "StopTestPlan",
			Handler:    _Fmt_StopTestPlan_Handler,
		},
		{
			MethodName: "InsertROIMarker",
			Handler:    _Fmt_InsertROIMarker_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fmt.proto",
}
