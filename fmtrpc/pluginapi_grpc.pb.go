// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package fmtrpc

import (
	context "context"
	proto "github.com/SSSOC-CAN/laniakea-plugin-sdk/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PluginAPIClient is the client API for PluginAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PluginAPIClient interface {
	// fmtcli: `plugin-startrecord`
	//StartRecording will begin recording data from specified datasource.
	StartRecord(ctx context.Context, in *PluginRequest, opts ...grpc.CallOption) (*proto.Empty, error)
	// fmtcli: `plugin-stoprecord`
	//StopRecording will end the recording of data from specified datasource.
	StopRecord(ctx context.Context, in *PluginRequest, opts ...grpc.CallOption) (*proto.Empty, error)
	//
	//Subscribe returns a uni-directional stream of data from a specified datasource.
	Subscribe(ctx context.Context, in *PluginRequest, opts ...grpc.CallOption) (PluginAPI_SubscribeClient, error)
	// fmtcli: `plugin-start`
	//StartPlugin will start the specified existing plugin. Plugins added in this way will not be present upon fmtd restart
	StartPlugin(ctx context.Context, in *PluginRequest, opts ...grpc.CallOption) (*proto.Empty, error)
	// fmtcli: `plugin-stop`
	//StopPlugin will stop the specified plugin.
	StopPlugin(ctx context.Context, in *PluginRequest, opts ...grpc.CallOption) (*proto.Empty, error)
	// fmtcli: `plugin-command`
	//Command will send any command to a controller service.
	Command(ctx context.Context, in *ControllerPluginRequest, opts ...grpc.CallOption) (PluginAPI_CommandClient, error)
	// fmtcli: `plugin-list`
	//ListPlugins will send a list of registered and running plugins.
	ListPlugins(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption) (*PluginsList, error)
	// fmtcli: `plugin-add`
	//AddPlugin will add a plugin from given information.
	AddPlugin(ctx context.Context, in *PluginConfig, opts ...grpc.CallOption) (*Plugin, error)
	// fmtcli: `plugin-info`
	//GetPlugin will retrieve the information for the given plugin.
	GetPlugin(ctx context.Context, in *PluginRequest, opts ...grpc.CallOption) (*Plugin, error)
}

type pluginAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewPluginAPIClient(cc grpc.ClientConnInterface) PluginAPIClient {
	return &pluginAPIClient{cc}
}

func (c *pluginAPIClient) StartRecord(ctx context.Context, in *PluginRequest, opts ...grpc.CallOption) (*proto.Empty, error) {
	out := new(proto.Empty)
	err := c.cc.Invoke(ctx, "/fmtrpc.PluginAPI/StartRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginAPIClient) StopRecord(ctx context.Context, in *PluginRequest, opts ...grpc.CallOption) (*proto.Empty, error) {
	out := new(proto.Empty)
	err := c.cc.Invoke(ctx, "/fmtrpc.PluginAPI/StopRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginAPIClient) Subscribe(ctx context.Context, in *PluginRequest, opts ...grpc.CallOption) (PluginAPI_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &PluginAPI_ServiceDesc.Streams[0], "/fmtrpc.PluginAPI/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &pluginAPISubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PluginAPI_SubscribeClient interface {
	Recv() (*proto.Frame, error)
	grpc.ClientStream
}

type pluginAPISubscribeClient struct {
	grpc.ClientStream
}

func (x *pluginAPISubscribeClient) Recv() (*proto.Frame, error) {
	m := new(proto.Frame)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pluginAPIClient) StartPlugin(ctx context.Context, in *PluginRequest, opts ...grpc.CallOption) (*proto.Empty, error) {
	out := new(proto.Empty)
	err := c.cc.Invoke(ctx, "/fmtrpc.PluginAPI/StartPlugin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginAPIClient) StopPlugin(ctx context.Context, in *PluginRequest, opts ...grpc.CallOption) (*proto.Empty, error) {
	out := new(proto.Empty)
	err := c.cc.Invoke(ctx, "/fmtrpc.PluginAPI/StopPlugin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginAPIClient) Command(ctx context.Context, in *ControllerPluginRequest, opts ...grpc.CallOption) (PluginAPI_CommandClient, error) {
	stream, err := c.cc.NewStream(ctx, &PluginAPI_ServiceDesc.Streams[1], "/fmtrpc.PluginAPI/Command", opts...)
	if err != nil {
		return nil, err
	}
	x := &pluginAPICommandClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PluginAPI_CommandClient interface {
	Recv() (*proto.Frame, error)
	grpc.ClientStream
}

type pluginAPICommandClient struct {
	grpc.ClientStream
}

func (x *pluginAPICommandClient) Recv() (*proto.Frame, error) {
	m := new(proto.Frame)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pluginAPIClient) ListPlugins(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption) (*PluginsList, error) {
	out := new(PluginsList)
	err := c.cc.Invoke(ctx, "/fmtrpc.PluginAPI/ListPlugins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginAPIClient) AddPlugin(ctx context.Context, in *PluginConfig, opts ...grpc.CallOption) (*Plugin, error) {
	out := new(Plugin)
	err := c.cc.Invoke(ctx, "/fmtrpc.PluginAPI/AddPlugin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginAPIClient) GetPlugin(ctx context.Context, in *PluginRequest, opts ...grpc.CallOption) (*Plugin, error) {
	out := new(Plugin)
	err := c.cc.Invoke(ctx, "/fmtrpc.PluginAPI/GetPlugin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PluginAPIServer is the server API for PluginAPI service.
// All implementations must embed UnimplementedPluginAPIServer
// for forward compatibility
type PluginAPIServer interface {
	// fmtcli: `plugin-startrecord`
	//StartRecording will begin recording data from specified datasource.
	StartRecord(context.Context, *PluginRequest) (*proto.Empty, error)
	// fmtcli: `plugin-stoprecord`
	//StopRecording will end the recording of data from specified datasource.
	StopRecord(context.Context, *PluginRequest) (*proto.Empty, error)
	//
	//Subscribe returns a uni-directional stream of data from a specified datasource.
	Subscribe(*PluginRequest, PluginAPI_SubscribeServer) error
	// fmtcli: `plugin-start`
	//StartPlugin will start the specified existing plugin. Plugins added in this way will not be present upon fmtd restart
	StartPlugin(context.Context, *PluginRequest) (*proto.Empty, error)
	// fmtcli: `plugin-stop`
	//StopPlugin will stop the specified plugin.
	StopPlugin(context.Context, *PluginRequest) (*proto.Empty, error)
	// fmtcli: `plugin-command`
	//Command will send any command to a controller service.
	Command(*ControllerPluginRequest, PluginAPI_CommandServer) error
	// fmtcli: `plugin-list`
	//ListPlugins will send a list of registered and running plugins.
	ListPlugins(context.Context, *proto.Empty) (*PluginsList, error)
	// fmtcli: `plugin-add`
	//AddPlugin will add a plugin from given information.
	AddPlugin(context.Context, *PluginConfig) (*Plugin, error)
	// fmtcli: `plugin-info`
	//GetPlugin will retrieve the information for the given plugin.
	GetPlugin(context.Context, *PluginRequest) (*Plugin, error)
	mustEmbedUnimplementedPluginAPIServer()
}

// UnimplementedPluginAPIServer must be embedded to have forward compatible implementations.
type UnimplementedPluginAPIServer struct {
}

func (UnimplementedPluginAPIServer) StartRecord(context.Context, *PluginRequest) (*proto.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartRecord not implemented")
}
func (UnimplementedPluginAPIServer) StopRecord(context.Context, *PluginRequest) (*proto.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopRecord not implemented")
}
func (UnimplementedPluginAPIServer) Subscribe(*PluginRequest, PluginAPI_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedPluginAPIServer) StartPlugin(context.Context, *PluginRequest) (*proto.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartPlugin not implemented")
}
func (UnimplementedPluginAPIServer) StopPlugin(context.Context, *PluginRequest) (*proto.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopPlugin not implemented")
}
func (UnimplementedPluginAPIServer) Command(*ControllerPluginRequest, PluginAPI_CommandServer) error {
	return status.Errorf(codes.Unimplemented, "method Command not implemented")
}
func (UnimplementedPluginAPIServer) ListPlugins(context.Context, *proto.Empty) (*PluginsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPlugins not implemented")
}
func (UnimplementedPluginAPIServer) AddPlugin(context.Context, *PluginConfig) (*Plugin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPlugin not implemented")
}
func (UnimplementedPluginAPIServer) GetPlugin(context.Context, *PluginRequest) (*Plugin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlugin not implemented")
}
func (UnimplementedPluginAPIServer) mustEmbedUnimplementedPluginAPIServer() {}

// UnsafePluginAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PluginAPIServer will
// result in compilation errors.
type UnsafePluginAPIServer interface {
	mustEmbedUnimplementedPluginAPIServer()
}

func RegisterPluginAPIServer(s grpc.ServiceRegistrar, srv PluginAPIServer) {
	s.RegisterService(&PluginAPI_ServiceDesc, srv)
}

func _PluginAPI_StartRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginAPIServer).StartRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fmtrpc.PluginAPI/StartRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginAPIServer).StartRecord(ctx, req.(*PluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginAPI_StopRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginAPIServer).StopRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fmtrpc.PluginAPI/StopRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginAPIServer).StopRecord(ctx, req.(*PluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginAPI_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PluginRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PluginAPIServer).Subscribe(m, &pluginAPISubscribeServer{stream})
}

type PluginAPI_SubscribeServer interface {
	Send(*proto.Frame) error
	grpc.ServerStream
}

type pluginAPISubscribeServer struct {
	grpc.ServerStream
}

func (x *pluginAPISubscribeServer) Send(m *proto.Frame) error {
	return x.ServerStream.SendMsg(m)
}

func _PluginAPI_StartPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginAPIServer).StartPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fmtrpc.PluginAPI/StartPlugin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginAPIServer).StartPlugin(ctx, req.(*PluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginAPI_StopPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginAPIServer).StopPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fmtrpc.PluginAPI/StopPlugin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginAPIServer).StopPlugin(ctx, req.(*PluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginAPI_Command_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ControllerPluginRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PluginAPIServer).Command(m, &pluginAPICommandServer{stream})
}

type PluginAPI_CommandServer interface {
	Send(*proto.Frame) error
	grpc.ServerStream
}

type pluginAPICommandServer struct {
	grpc.ServerStream
}

func (x *pluginAPICommandServer) Send(m *proto.Frame) error {
	return x.ServerStream.SendMsg(m)
}

func _PluginAPI_ListPlugins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginAPIServer).ListPlugins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fmtrpc.PluginAPI/ListPlugins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginAPIServer).ListPlugins(ctx, req.(*proto.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginAPI_AddPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PluginConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginAPIServer).AddPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fmtrpc.PluginAPI/AddPlugin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginAPIServer).AddPlugin(ctx, req.(*PluginConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginAPI_GetPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginAPIServer).GetPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fmtrpc.PluginAPI/GetPlugin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginAPIServer).GetPlugin(ctx, req.(*PluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PluginAPI_ServiceDesc is the grpc.ServiceDesc for PluginAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PluginAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fmtrpc.PluginAPI",
	HandlerType: (*PluginAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartRecord",
			Handler:    _PluginAPI_StartRecord_Handler,
		},
		{
			MethodName: "StopRecord",
			Handler:    _PluginAPI_StopRecord_Handler,
		},
		{
			MethodName: "StartPlugin",
			Handler:    _PluginAPI_StartPlugin_Handler,
		},
		{
			MethodName: "StopPlugin",
			Handler:    _PluginAPI_StopPlugin_Handler,
		},
		{
			MethodName: "ListPlugins",
			Handler:    _PluginAPI_ListPlugins_Handler,
		},
		{
			MethodName: "AddPlugin",
			Handler:    _PluginAPI_AddPlugin_Handler,
		},
		{
			MethodName: "GetPlugin",
			Handler:    _PluginAPI_GetPlugin_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _PluginAPI_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Command",
			Handler:       _PluginAPI_Command_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pluginapi.proto",
}
